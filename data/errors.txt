IndexError: list index out of range
This error occurs when you try to access an index in a list that doesn’t exist. Lists in Python are zero-indexed, so the first element is at index 0, the second at index 1, and so on. If a list has 3 elements (indexes 0 to 2), trying to access index 3 or higher will raise this error. To fix it, always check the length of your list using `len()` before accessing an index.

TypeError: 'int' object is not iterable
This happens when you try to loop over an integer using a for-loop or try to convert it into a list or set. Integers are not sequences, so you can't iterate over them. For example, `for i in 5:` will cause this error. If you intended to loop 'n' times, use `range(5)` instead.

AttributeError: 'NoneType' object has no attribute
This error means you're trying to access an attribute or call a method on a variable that is `None`. It often occurs when a function returns `None` unexpectedly. For example, calling `.append()` on a list returns `None`, so doing `result = my_list.append(3)` and then `result.sort()` would raise this error. Make sure your variable is not `None` before using it.

SyntaxError: invalid syntax
This is raised when Python encounters a line of code that doesn't follow the correct syntax rules. Common causes include missing colons, unmatched parentheses, incorrect indentation, or typos in keywords. For example, `if True print('hi')` is invalid because the colon after `if True` is missing. Always double-check punctuation and indentation.

NameError: name 'xyz' is not defined
This error occurs when you try to use a variable or function that hasn’t been defined yet. This could be due to a typo, or because the variable is used before being assigned. For example, `print(my_var)` before `my_var = 5` will cause a NameError. Make sure all variables are defined before use.

ZeroDivisionError: division by zero
This error occurs when a number is divided by zero, which is mathematically undefined. In Python, trying `10 / 0` will raise this error. Always ensure the denominator is not zero before performing division.

IndentationError: expected an indented block
This means that Python expected an indented line after a statement like `if`, `for`, `while`, `def`, or `class`. Python uses indentation (spaces or tabs) to define blocks of code. For example:

```python
if x > 0:
print(x)  # this line should be indented
```

ModuleNotFoundError: No module named 'xyz'
This error means that Python can’t find the module you’re trying to import. It may not be installed, or you might have misspelled the name. You can install modules using `pip install module_name`. Also check for typos in the import statement.

ValueError: invalid literal for int() with base 10
This error occurs when you try to convert a string to an integer, but the string isn’t formatted correctly. For example, `int('hello')` will raise this. Ensure the string only contains digits or valid numerical characters before conversion.

TypeError: unsupported operand type(s) for +: 'int' and 'str'
This means you're trying to add an integer and a string, which Python doesn't allow directly. For example: `1 + 'a'`. If you want to concatenate, convert the int to a string first: `str(1) + 'a'`. If you're doing math, make sure all operands are numbers.